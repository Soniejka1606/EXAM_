# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'table_add.ui'
#
# Created by: PyQt5 UI code generator 5.15.5
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QTableWidgetItem, QVBoxLayout, QLabel, QMessageBox

import uvel_reklama
from DATABASE import info_table_add, otmena_add


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(907, 637)
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(40, 170, 841, 271))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(100, 40, 271, 61))
        font = QtGui.QFont()
        font.setFamily("NewsGoth BT")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(True)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        # self.textEdit = QtWidgets.QTextEdit(Dialog)
        # self.textEdit.setGeometry(QtCore.QRect(420, 50, 221, 51))
        # self.textEdit.setObjectName("textEdit")

        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(420, 50, 221, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit_6")

        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(320, 570, 251, 41))
        self.pushButton_4.setObjectName("pushButton_2")

        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(510, 510, 251, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(120, 510, 251, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_2.setAutoDefault(False)
        self.pushButton_3.setAutoDefault(False)
        self.pushButton_4.setAutoDefault(False)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        pixmap = QtGui.QPixmap("pic_qt/backdr1.jpg")
        background_label = QtWidgets.QLabel(Dialog)
        background_label.setGeometry(Dialog.rect())
        background_label.setPixmap(pixmap.scaled(Dialog.size()))  # Масштабируем изображение под размер виджета
        background_label.lower()


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Фильтр по описанию"))
        self.pushButton_2.setText(_translate("Dialog", "Изменить активность рекламы"))
        self.pushButton_3.setText(_translate("Dialog", "Посмотреть фото"))
        self.pushButton_4.setText(_translate("Dialog", "Добавить кол-ва рекламы"))
        self.pushButton_3.clicked.connect(self.whow_photo)
        self.lineEdit.editingFinished.connect(self.search_table)
        self.pushButton_2.clicked.connect(self.otmena_reklamy)
        self.pushButton_4.clicked.connect(self.add_count_add)

    def add_count_add(self):
        selected_row = self.tableWidget.currentRow()
        if selected_row >= 0:
            item = self.tableWidget.item(selected_row, 0)
            # print(item.text())
            id_ = item.text()
            Dialog = QtWidgets.QDialog()
            ui8 = uvel_reklama.Ui_Dialog()
            ui8.setupUi(Dialog)
            ui8.id_reklama = id_
            Dialog.show()
            Dialog.exec_()
            self.gen_tabl()

    def otmena_reklamy(self):
        selected_row = self.tableWidget.currentRow()
        if selected_row >= 0:
            item = self.tableWidget.item(selected_row, 0)
            # print(item.text())
            id_ = item.text()
            activnost = self.tableWidget.item(selected_row, 5)
            # print(item.text())
            activ = activnost.text()
            if activ == "Не активна":
                otmena_add(id_,1)
            else:
                otmena_add(id_, 0)
        self.gen_tabl()
        pass
    def gen_tabl(self):
        print()
        try:
            products = info_table_add()
            self.table_name = 'Товары'
            self.tableWidget.setColumnCount(len(products[0]))
            self.tableWidget.setRowCount(len(products))
            self.tableWidget.setHorizontalHeaderLabels(['id','Фото', 'требуемое кол-во','Описание','Просмотры',"Активность"])
            row = 0
            for tup in products:
                col = 0
                for item in tup:
                    if col == 5:
                        if item == 0 or item == "0":
                            cell_info = QTableWidgetItem("Не активна")
                        elif item == 1 or item == "1":
                            cell_info = QTableWidgetItem("Активна")
                        else:
                            cell_info = QTableWidgetItem(str(item))
                    else:
                        cell_info = QTableWidgetItem(str(item))
                    self.tableWidget.setItem(row, col, cell_info)
                    col += 1
                row += 1
                self.tableWidget.resizeColumnsToContents()
        except:
            pass
        self.tableWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)

    def search_table(self):
        #поиск по критериям
        nned_text =getattr(self, "lineEdit").text().lower()
        # print(nned_text)
        # nned_text = self.lineEdit_3.text().lower()  # Забрала текст
        rows = self.tableWidget.rowCount()
        which_column = 3  # какую колонку будем выбирать

        for row in range(rows):
            # visible = False #по дэфолту невидимая строка
            visible = True
            item = self.tableWidget.item(row, which_column)  # в каждой строке выбираем колонку
            if item is not None and nned_text in item.text().lower(): #если значение подощло то тогда строка становится видимой
                visible = False

            self.tableWidget.setRowHidden(row, visible)

    def whow_photo(self):
        selected_row = self.tableWidget.currentRow()
        if selected_row >= 0:
            item = self.tableWidget.item(selected_row, 1)
            # print(item.text())
            photo = item.text()
        else:
            message_box = QMessageBox()
            message_box.setIcon(QMessageBox.Warning)
            message_box.setText("вы не выбрали фотографию")
            message_box.setWindowTitle("Error Нет фотографии")
            message_box.exec()
            return 0
        image_label = QLabel()
        image_label.setFixedSize(400, 400)

        # Load the image
        image_path = photo
        pixmap = QPixmap(image_path)

        # Set the pixmap in the QLabel
        image_label.setPixmap(pixmap)
        image_label.setScaledContents(True)  #


        layout = QVBoxLayout()
        layout.addWidget(image_label)

        # Create a new dialog window to display the image
        image_dialog = QtWidgets.QDialog()
        image_dialog.setLayout(layout)
        image_dialog.setWindowTitle("Image Viewer")
        image_dialog.exec()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    ui.gen_tabl()
    Dialog.show()
    sys.exit(app.exec_())
